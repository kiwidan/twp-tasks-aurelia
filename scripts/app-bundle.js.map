{"version":3,"sources":["src/api.ts","src/app.ts","src/board.ts","src/env.ts","src/environment.ts","src/events.ts","src/global-alert.ts","src/kanban.ts","src/main.ts","src/task.ts","src/resources/index.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\nimport {HttpClient} from 'aurelia-fetch-client';\nimport env from './env';\n\nconst defaultHeaders = {\n  'Accept': 'application/json',\n  'Authorization': \"BASIC \" + window.btoa(env.key + ':xxx')\n}\n\n@inject(HttpClient)\nexport default class Api {\n  private client: HttpClient;\n\n  constructor(client: HttpClient) {\n    this.client = client;\n  }\n\n  public toggleCompleted(id, completed) {\n    const action = completed ? 'complete' : 'uncomplete';\n    const url = `https://${env.company}.teamwork.com/tasks/${id}/${action}.json`;\n\n    return this.client.fetch(url, {method: 'PUT', headers: defaultHeaders});\n  }\n}","export class App {\n\n}\n","import {HttpClient} from 'aurelia-fetch-client';\nimport Task from './task';\nimport env from './env';\n\nexport default class Board {\n  id: number;\n  name: string;\n  tasks: Task[];\n  loading: boolean;\n\n  constructor(id: number, name: string) {\n    this.id = id;\n    this.name = name;\n    this.loading = true;\n\n    // Go get tasks\n    const client = new HttpClient();\n\n    client.fetch(`https://${env.company}.teamwork.com/tasklists/${this.id}/tasks.json?includeCompletedTasks=true`, {\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': \"BASIC \" + window.btoa(env.key + ':xxx')\n        }\n      })\n      .then(response => response.json())\n      .then((response) => {\n        const tasks: Task[] = [];\n\n        response['todo-items'].map(task => {\n          tasks.push(new Task(task.id, task.content, task.completed));\n        });\n\n        this.tasks = tasks;\n        this.loading = false;\n      });\n  }\n}","const env = {\n    company: 'paddymoran',\n    key: 'cup420ears',\n    projectId: '266471'\n};\n\nexport default env;\n","export default {\n  debug: true,\n  testing: true\n};\n","enum GlobalAlertType {\n    Error\n}\n\nexport class GlobalAlert {\n    public static types = GlobalAlertType;\n\n    constructor(public type: GlobalAlertType, public message: string) { }\n}","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {GlobalAlert} from './events';\n\n@inject(EventAggregator)\nexport class Error {\n  public alerts: GlobalAlert[] = [];\n  private globalAlertSubscription;\n\n  constructor(private ea: EventAggregator) { }\n\n  attached() {\n    this.globalAlertSubscription = this.ea.subscribe(GlobalAlert, event => console.log('event received in global alert.ts'));\n    \n    // this.ea.subscribe(GlobalAlert, event => {\n    //   this.alerts.push(event)\n    //   console.log('here');\n    // });\n  }\n\n  detached() {\n    this.globalAlertSubscription.dispose();\n  }\n}","import {HttpClient} from 'aurelia-fetch-client';\nimport env from './env';\nimport Board from './board';\n\n\ninterface ITasklistsResponse extends Response {\n  tasklists: Board[];\n}\n\nexport class Kanban {\n  boards: Board[];\n  loading: boolean;\n\n  constructor() {\n    this.loading = true;\n    const client = new HttpClient();\n    const url = `https://${env.company}.teamwork.com/projects/${env.projectId}/tasklists.json?status=all`;\n\n    client.fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': \"BASIC \" + window.btoa(env.key + ':xxx')\n        }\n      })\n      .then(response => response.json())\n      .then((response: ITasklistsResponse) => {\n        const boards: Board[] = [];\n\n        response.tasklists.map(tasklist => {\n          boards.push(\n            new Board(tasklist.id, tasklist.name)\n          );\n        });\n\n        this.boards = boards;\n        this.loading = false;\n      });\n  }\n}","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {HttpClient} from 'aurelia-fetch-client';\nimport {GlobalAlert} from './events';\nimport env from './env';\nimport {Container} from 'aurelia-dependency-injection';\nimport Api from './api';\n\nexport default class Task {\n  public id: number;\n  public description: string;\n  public completed: boolean;\n\n  private ea: EventAggregator;\n  private client: HttpClient;\n  private globalAlertSubscription;\n  private api: Api;\n\n  constructor(id: number, description: string, completed: boolean = false) {\n    this.id = id;\n    this.description = description;\n    this.completed = completed;\n\n    this.ea = Container.instance.get(EventAggregator); // get or create the singleton instance managed by the container.\n    this.client = Container.instance.get(HttpClient);\n    this.api = Container.instance.get(Api);\n\n    this.globalAlertSubscription = this.ea.subscribe(GlobalAlert, event => console.log('event received in task.ts'));\n  }\n\n  detached() {\n    this.globalAlertSubscription.dispose();\n  }\n\n  toggleCompleted() {\n    this.completed = !this.completed;\n\n    this.api.toggleCompleted(this.id, this.completed)\n      .then(response => {\n        throw new Error('testing');\n      })\n      .catch(error => {\n        this.completed = !this.completed;\n        this.ea.publish(new GlobalAlert(GlobalAlert.types.Error, `Failed to toggle task: \"${this.description}\"`));\n      });\n  }\n}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}